package com.example.musicplayerapp2

import android.app.PictureInPictureParams
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.content.res.Configuration
import android.graphics.BitmapFactory
import android.media.MediaMetadataRetriever
import android.os.Build
import android.os.Bundle
import android.os.IBinder
import android.util.Rational
import android.view.View
import android.widget.SeekBar
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.LinearSmoothScroller
import com.example.musicplayerapp2.adapter.LyricsAdapter
import com.example.musicplayerapp2.data.Song
import com.example.musicplayerapp2.databinding.ActivityPlayerBinding
import com.example.musicplayerapp2.databinding.LayoutPipControlsBinding
import com.example.musicplayerapp2.lyrics.LyricLine
import com.example.musicplayerapp2.lyrics.LyricsManager
import com.example.musicplayerapp2.service.MusicService
import com.example.musicplayerapp2.viewmodel.PlayerViewModel
import java.util.concurrent.TimeUnit

class PlayerActivity : AppCompatActivity() {

    private lateinit var binding: ActivityPlayerBinding
    private lateinit var pipControlsBinding: LayoutPipControlsBinding
    private val playerViewModel: PlayerViewModel by viewModels()
    private var musicService: MusicService? = null
    private var isInPictureInPictureMode = false

    // Ê≠åËØçÁõ∏ÂÖ≥
    private lateinit var lyricsAdapter: LyricsAdapter
    private lateinit var lyricsManager: LyricsManager
    private var currentLyrics: List<LyricLine> = emptyList()
    private var isLyricsVisible = true

    private val connection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            val binder = service as MusicService.MusicBinder
            musicService = binder.getService()

            // ‰ªé Intent ‰∏≠Ëé∑ÂèñÊí≠ÊîæÂàóË°®ÂíåÁ¥¢Âºï
            val playlist = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                intent.getParcelableArrayListExtra(MusicService.EXTRA_SONG_LIST, Song::class.java)
            } else {
                @Suppress("DEPRECATION")
                intent.getParcelableArrayListExtra<Song>(MusicService.EXTRA_SONG_LIST)
            }
            val songIndex = intent.getIntExtra(MusicService.EXTRA_SONG_INDEX, 0)

            // Â¶ÇÊûúÊúâÊí≠ÊîæÂàóË°®Êï∞ÊçÆÔºåËÆæÁΩÆÁªôÊúçÂä°
            playlist?.let { list ->
                musicService?.setPlaylistAndPlay(list, songIndex)
            }

            setupObservers()
        }
        override fun onServiceDisconnected(name: ComponentName?) {
            musicService = null
        }
    }

    private fun loadLyrics(song: Song) {
        if (!isInPictureInPictureMode) {
            Thread {
                val lyrics = lyricsManager.getLyrics(this, song)
                currentLyrics = if (lyrics.isNotEmpty()) {
                    lyrics
                } else {
                    lyricsManager.createSampleLyrics()
                }

                runOnUiThread {
                    lyricsAdapter.submitList(currentLyrics)
                }
            }.start()
        }
    }

    private fun updateLyricsHighlight(currentTimeMs: Long) {
        if (currentLyrics.isNotEmpty() && isLyricsVisible && !isInPictureInPictureMode) {
            val currentIndex = lyricsManager.getCurrentLyricIndex(currentLyrics, currentTimeMs)
            lyricsAdapter.setHighlight(currentIndex)

            if (currentIndex >= 0) {
                scrollToLyricCenter(currentIndex)
            }
        }
    }

    private fun scrollToLyricCenter(index: Int) {
        val layoutManager = binding.rvLyrics.layoutManager as? LinearLayoutManager
        layoutManager?.let {
            val visibleItemCount = it.findLastVisibleItemPosition() - it.findFirstVisibleItemPosition() + 1
            val centerOffset = visibleItemCount / 2
            val targetPosition = (index - centerOffset).coerceAtLeast(0)

            val smoothScroller = object : LinearSmoothScroller(this) {
                override fun getVerticalSnapPreference(): Int {
                    return SNAP_TO_START
                }
            }
            smoothScroller.targetPosition = targetPosition
            it.startSmoothScroll(smoothScroller)
        }
    }

    private fun toggleLyricsVisibility() {
        isLyricsVisible = !isLyricsVisible

        if (isLyricsVisible) {
            binding.rvLyrics.visibility = View.VISIBLE
            binding.rvLyrics.alpha = 0f
            binding.rvLyrics.animate()
                .alpha(1f)
                .setDuration(300)
                .start()
        } else {
            binding.rvLyrics.animate()
                .alpha(0f)
                .setDuration(300)
                .withEndAction {
                    binding.rvLyrics.visibility = View.INVISIBLE
                }
                .start()
        }
    }

    private fun setupLyrics() {
        lyricsManager = LyricsManager.getInstance()
        lyricsAdapter = LyricsAdapter()

        binding.rvLyrics.apply {
            layoutManager = LinearLayoutManager(this@PlayerActivity).apply {
                stackFromEnd = false
            }
            adapter = lyricsAdapter
            visibility = View.VISIBLE
            isNestedScrollingEnabled = false
        }

        // Ê≠åËØçÁÇπÂáªË∑≥ËΩ¨
        lyricsAdapter.setOnLyricClickListener { position ->
            if (position < currentLyrics.size) {
                val targetTime = currentLyrics[position].timeMs.toInt()
                musicService?.seekTo(targetTime)
            }
        }

        // ÁÇπÂáªÊ≠åËØçÂå∫ÂüüÂàáÊç¢ÊòæÁ§∫/ÈöêËóè
        binding.rvLyrics.setOnClickListener {
            toggleLyricsVisibility()
        }

        // ÈïøÊåâÊ≠åËØçÂå∫ÂüüÂèØ‰ª•ÂàáÊç¢ÊòæÁ§∫Ê®°Âºè
        binding.rvLyrics.setOnLongClickListener {
            true
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityPlayerBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // ÂàùÂßãÂåñ PiP Êéß‰ª∂Â∏ÉÂ±Ä
        pipControlsBinding = LayoutPipControlsBinding.inflate(layoutInflater)

        setSupportActionBar(binding.toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        binding.toolbar.setNavigationOnClickListener {
            // Ê£ÄÊü•ÊòØÂê¶ÊîØÊåÅ PiP Ê®°Âºè
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
                packageManager.hasSystemFeature(android.content.pm.PackageManager.FEATURE_PICTURE_IN_PICTURE)) {
                enterPipMode()
            } else {
                onBackPressedDispatcher.onBackPressed()
            }
        }

        setupLyrics()
        setupControls()
        setupPipControls()

        // ÂêØÂä®Âπ∂ÁªëÂÆöÈü≥‰πêÊúçÂä°
        val serviceIntent = Intent(this, MusicService::class.java)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(serviceIntent)
        } else {
            startService(serviceIntent)
        }
        bindService(serviceIntent, connection, Context.BIND_AUTO_CREATE)
    }

    private fun setupControls() {
        // ‚ñ∂Ô∏è Êí≠Êîæ / ÊöÇÂÅú
        binding.btnPlayPause.setOnClickListener {
            musicService?.isPlaying?.value?.let { isPlaying ->
                if (isPlaying) {
                    musicService?.pauseSong()
                } else {
                    musicService?.resumeSong()
                }
            }
        }
        // ‚è≠Ô∏è ‰∏ã‰∏ÄÈ¶ñ
        binding.btnNext.setOnClickListener { musicService?.playNext() }
        // ‚èÆÔ∏è ‰∏ä‰∏ÄÈ¶ñ
        binding.btnPrevious.setOnClickListener { musicService?.playPrevious() }
        // üîÄ ÈöèÊú∫ÂàáÊç¢
        binding.btnShuffle.setOnClickListener { musicService?.toggleShuffle() }
        // üîÅ Âæ™ÁéØÂàáÊç¢
        binding.btnRepeat.setOnClickListener { musicService?.toggleRepeatMode() }
        // üìª ÊãñÂä®ËøõÂ∫¶Êù°
        binding.seekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(sb: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    musicService?.seekTo(progress)
                }
            }
            override fun onStartTrackingTouch(sb: SeekBar?) {}
            override fun onStopTrackingTouch(sb: SeekBar?) {}
        })
    }

    private fun setupPipControls() {
        // ËÆæÁΩÆ PiP Ê®°Âºè‰∏ãÁöÑÊéß‰ª∂ÁÇπÂáª‰∫ã‰ª∂
        pipControlsBinding.btnPipPlayPause.setOnClickListener {
            musicService?.isPlaying?.value?.let { isPlaying ->
                if (isPlaying) {
                    musicService?.pauseSong()
                } else {
                    musicService?.resumeSong()
                }
            }
        }

        pipControlsBinding.btnPipNext.setOnClickListener {
            musicService?.playNext()
        }

        pipControlsBinding.btnPipPrevious.setOnClickListener {
            musicService?.playPrevious()
        }

        // ÁÇπÂáªÊ≠åÊõ≤‰ø°ÊÅØÂå∫ÂüüËøîÂõûÂÖ®Â±èÊ®°Âºè
        pipControlsBinding.layoutSongInfo.setOnClickListener {
            if (isInPictureInPictureMode) {
                // ÂàõÂª∫ Intent ÈáçÊñ∞ÊâìÂºÄÂÖ®Â±èÊí≠ÊîæÂô®
                val intent = Intent(this, PlayerActivity::class.java).apply {
                    flags = Intent.FLAG_ACTIVITY_REORDER_TO_FRONT
                }
                startActivity(intent)
            }
        }
    }

    private fun enterPipMode() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            try {
                val params = PictureInPictureParams.Builder()
                    .setAspectRatio(Rational(16, 9)) // ËÆæÁΩÆÂÆΩÈ´òÊØî
                    .build()

                enterPictureInPictureMode(params)
            } catch (e: Exception) {
                e.printStackTrace()
                // Â¶ÇÊûúËøõÂÖ• PiP Â§±Ë¥•ÔºåÂàôÊ≠£Â∏∏ËøîÂõû
                onBackPressedDispatcher.onBackPressed()
            }
        }
    }

    override fun onPictureInPictureModeChanged(
        isInPictureInPictureMode: Boolean,
        newConfig: Configuration
    ) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig)
        this.isInPictureInPictureMode = isInPictureInPictureMode

        if (isInPictureInPictureMode) {
            // ËøõÂÖ• PiP Ê®°ÂºèÔºöÈöêËóèÂ∏∏ËßÑ UIÔºåÊòæÁ§∫ PiP Êéß‰ª∂
            binding.root.visibility = View.GONE
            setContentView(pipControlsBinding.root)

            // Êõ¥Êñ∞ PiP ÁïåÈù¢ÁöÑÊ≠åÊõ≤‰ø°ÊÅØ
            updatePipUI()
        } else {
            // ÈÄÄÂá∫ PiP Ê®°ÂºèÔºöÊÅ¢Â§çÂ∏∏ËßÑ UI
            setContentView(binding.root)
            binding.root.visibility = View.VISIBLE

            // ÈáçÊñ∞ËÆæÁΩÆÂ∑•ÂÖ∑Ê†è
            setSupportActionBar(binding.toolbar)
            supportActionBar?.setDisplayHomeAsUpEnabled(true)
            binding.toolbar.setNavigationOnClickListener {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
                    packageManager.hasSystemFeature(android.content.pm.PackageManager.FEATURE_PICTURE_IN_PICTURE)) {
                    enterPipMode()
                } else {
                    onBackPressedDispatcher.onBackPressed()
                }
            }
        }
    }

    private fun updatePipUI() {
        musicService?.currentSong?.value?.let { song ->
            pipControlsBinding.tvPipSongTitle.text = song.title
            pipControlsBinding.tvPipArtist.text = song.artist

            // Âä†ËΩΩ‰∏ìËæëÂ∞ÅÈù¢Âà∞ PiP ÁïåÈù¢
            loadAlbumArtForPip(song.data)
        }

        // Êõ¥Êñ∞Êí≠ÊîæÊåâÈíÆÁä∂ÊÄÅ
        musicService?.isPlaying?.value?.let { isPlaying ->
            updatePipPlayPauseButton(isPlaying)
        }
    }

    private fun updatePipPlayPauseButton(isPlaying: Boolean) {
        val iconRes = if (isPlaying) {
            R.drawable.ic_pause
        } else {
            R.drawable.ic_play
        }
        pipControlsBinding.btnPipPlayPause.setImageResource(iconRes)
    }

    private fun loadAlbumArtForPip(path: String) {
        val retriever = MediaMetadataRetriever()
        try {
            retriever.setDataSource(path)
            val art = retriever.embeddedPicture
            if (art != null) {
                val bitmap = BitmapFactory.decodeByteArray(art, 0, art.size)
                pipControlsBinding.ivPipAlbumArt.setImageBitmap(bitmap)
            } else {
                pipControlsBinding.ivPipAlbumArt.setImageResource(R.drawable.ic_default_cover)
            }
        } catch (e: Exception) {
            pipControlsBinding.ivPipAlbumArt.setImageResource(R.drawable.ic_default_cover)
        } finally {
            try {
                retriever.release()
            } catch (e: Exception) {
                // Ignore release errors
            }
        }
    }

    private fun setupObservers() {
        musicService?.currentSong?.observe(this) { song ->
            song?.let {
                updateUI(it)
                loadLyrics(it)
                if (isInPictureInPictureMode) {
                    updatePipUI()
                }
            }
        }
        musicService?.isPlaying?.observe(this) { isPlaying ->
            updatePlayPauseButton(isPlaying)
            if (isInPictureInPictureMode) {
                updatePipPlayPauseButton(isPlaying)
            }
        }
        musicService?.playbackPosition?.observe(this) { pos ->
            if (!isInPictureInPictureMode) {
                binding.seekBar.progress = pos
                binding.tvCurrentTime.text = formatTime(pos.toLong())
                // Êõ¥Êñ∞Ê≠åËØçÈ´ò‰∫Æ
                updateLyricsHighlight(pos.toLong())
            }
        }
    }

    private fun updateUI(song: Song) {
        if (!isInPictureInPictureMode) {
            binding.tvSongTitle.text = song.title
            binding.tvArtistName.text = song.artist
            loadAlbumArt(song.data)
            binding.tvTotalTime.text = formatTime(song.duration)
            binding.seekBar.max = song.duration.toInt()
        }
    }

    private fun updatePlayPauseButton(isPlaying: Boolean) {
        if (!isInPictureInPictureMode) {
            val icon = if (isPlaying) R.drawable.ic_pause_circle else R.drawable.ic_play_circle
            binding.btnPlayPause.setImageResource(icon)
        }
    }

    private fun loadAlbumArt(path: String) {
        val retriever = MediaMetadataRetriever()
        try {
            retriever.setDataSource(path)
            val art = retriever.embeddedPicture
            if (art != null) {
                val bmp = BitmapFactory.decodeByteArray(art, 0, art.size)
                binding.ivAlbumArt.setImageBitmap(bmp)
            } else {
                binding.ivAlbumArt.setImageResource(R.drawable.ic_default_cover)
            }
        } catch (_: Exception) {
            binding.ivAlbumArt.setImageResource(R.drawable.ic_default_cover)
        } finally {
            retriever.release()
        }
    }

    private fun formatTime(ms: Long): String {
        val m = TimeUnit.MILLISECONDS.toMinutes(ms)
        val s = TimeUnit.MILLISECONDS.toSeconds(ms) -
                TimeUnit.MINUTES.toSeconds(m)
        return String.format("%02d:%02d", m, s)
    }

    override fun onUserLeaveHint() {
        super.onUserLeaveHint()
        // ÂΩìÁî®Êà∑Êåâ Home ÈîÆÊó∂Ëá™Âä®ËøõÂÖ• PiP Ê®°Âºè
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
            packageManager.hasSystemFeature(android.content.pm.PackageManager.FEATURE_PICTURE_IN_PICTURE)) {
            enterPipMode()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        unbindService(connection)
    }
}